{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fmodern JetBrains Mono;}{\f1\fnil\fcharset0 Calibri;}}
{\colortbl ;\red140\green140\blue140;\red255\green255\blue255;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\box\brdrdash\brdrw0 \cbpat2\sa200\sl276\slmult1\cf1\i\f0\fs20\lang16393 # FUNCTION\line #  A FUNCTION IS A BLOCK OF CODE WHICH ONLY RUNDS WHEN IT IS CALLED\line\line # creating a function:\line # IN PYTHON A FUNCTION IS DEFINED USING THE def KEYWORD\line # eg\line # def abc():\line #     print("hello baswaraj")\line\line # calling a function:\line # to call function use the function name followed by parenthesis\line # eg\line # def abc():\line #     print("hello baswaraj")\line # abc()\line\line # parameters:\line\line # def wish(name):\line #     print("hello",name,"good morning")\line # wish("baswaraj")\line # wish("sadashiv")\line\line # def squarelet(number):\line #     print("the square of",number,"is",number*number)\line # squarelet(4)\line # squarelet(5)\line\line # return statement:\line\line # e\line #\line #\line #\line # def add(x,y):\line #     return x+y,x-y,x*y,x/y\line # result=add(10,20)\line # print("the sum is",result)\line # print("the sum is",add(10,20))\line\line # eg2\line # def f1():\line #     print("Hello")\line #\line # f1()\line # print(f1())\line #\line # eg3\line # def even_odd(*num):\line #     for i in num:\line #      if i%2==0:\line #         print(i,"is even num")\line #      else:\line #         print(i,"is odd num")\line # even_odd(10,11,12,13,14,15,16,17,18,19,20)\line # even_odd(15)\line\line # eg4\line # def sum_sub(a,b):\line #     sum=a+b\line #     sub=a-b\line #     return sum,sub\line # # print(sum_sub(100,50))\line # x,y=sum_sub(100,50)\line # print(" sum= ",x ,"sub=",y)\line\line # eg5\line # def sum_sub_mul_div (a,b):\line #     sum=a+b\line #     sub=a-b\line #     mul=a*b\line #     div=a/b\line #     return sum,sub,mul,div\line # print(sum_sub_mul_div(100,50))\line # print(list(sum_sub_mul_div(100,50)))\line # x,y,z,p=sum_sub_mul_div(100,50)\line # print("sum=",x,"sub=",y,"mul=",z,"div=",p)\line\line # eg6\line # def calc(a,b):\line #     sum=a+b\line #     sub=a-b\line #     mul=a*b\line #     div=a/b\line #     return sum,sub,mul,div\line # t=set(calc(10,20))\line # t1=list(calc(20,10))\line # # t3=calc(100,200)\line # for i in t,t1,t2:\line #     print(i)\line\line # type of arguments\line\line\line # 1 positional argument:\line # 2 keyword argument\line # 3 default argument\line # 4 variable length argument\line\line # 1 positional arguments:\line\line # def sub(a,b,):\line #     print(a-b)\line # sub(100,200)\line # sub(200,100)\line\line # 2 keyword argument:\line #\line # def wish(name,msg):\line #     print("Hello",name,msg)\line # wish(name="baswaraj",msg="good morning")\line # wish(msg="good night",name="kiran")\line # wish("baswaraj",msg="good night")\line # wish("baswaraj","good night")\line # wish(msg="good night","baswaraj") # invalid\line\line # 3 default argument\line #\line # def wish(name="Guest"):\line #     print("hello",name,"good morning")\line #\line # wish("durga")\line # wish()\line\line # varaible length argument:  def f1(*n)\line\line #eg:1\line # def sum(*n):\line #     total=0\line #     for n1 in n:\line #         total=total+n1\line #     print("the sum",total)\line #\line # sum()\line # sum(10)\line # sum(10,20,30)\line # sum(10,20,30,40)\line\line # eg2\line #\line # def f1(n1,*s):\line #     print(n1)\line #     for s1 in s:\line #         print(s1)\line # f1(10)\line # f1(10,20,30,40)\line # f1(10,"a",20,"b")\line\line # def f1(*s,n1):\line #     for s1 in s:\line #         print(s1)\line #     print(n1)\line # f1(10,n1=20)\line # f1("a","b",n1="c")\line\line # eg3\line #\line # def abc(**x):\line #     for key,value in x.items():\line #         print("%s  :  %s" % (key,value))\line #\line # abc(a="baswaraj",b="sadashiuv")\line\line # another method\line\line # def abc(**x):\line #     for k,v in x.items():\line #         print(k,"=",v)\line #     print(x.keys())\line #     print(x.values())\line # abc(n1=10,n2=20,n3=30)\line # abc(rno=100,name="baswaraj",marks=80,subject="python")\line\line\line # TYPE OF VARIABLE:\line\line # 1 GLOBAL VARIABLE:\line # 2 LOCAL VARIABLE:\line\line # 1 GLOBAL VARIABLE\line\line # eg\line\line # a="baswaraj"  #global variable\line # def f1():\line #     print(a)\line #\line #\line # def f2():\line #     print(a)\line #\line # f1()\line # f2()\line\line # 2 local variable:\line\line # def f1():\line #     a=10\line #     print(a)\line #\line # def f2():\line #     print(a)  # invalid\line #\line # f1()\line # f2()\line\line\line # global keyword:\line # we can use global keyword for the following 2 purpose:\line\line # 1 to decalre global variable inside function\line # 2 to make global variable available to the function so that we can perform required modfication\line\line # eg1\line # a="baswaraj"\line # def f1():\line #     a=10\line #     print(a)\line # def f2():\line #     print(a)\line #\line # f1()\line # f2()\line\line # eg2\line # a=10\line # def f1():\line #     global a\line #     a="baswaraj"\line #     print(a)\line #\line # def f2():\line #     print(a)\line #\line # f1()\line # f2()\line #\line # eg3\line # def f1():\line #     global a\line #     a="baswaraj"\line #     print(a)\line #\line #     a="sadashiv"\line #     print(a)\line #     a="brainworks"\line #\line #\line # def f2():\line #     print(a)\line\line # f1()\line # f2()\line\line # eg4\line #\line # a=10\line # b=15  #global variable\line # def f1():\line #     a=222   #local variable\line #     print(a)\line #     print(globals()['a'])\line #     print(b)\line # f1()\line\line\line # Recursive function:\line\line # a function that calls itself is known as recursive function\line\line # eg:\line # factorial(3)=3*factorial(2)\line #             =3*2*factorial(1)\line #             =3*2*1*factorial(0)\line #             =3*2*1*1\line #             =6\line # factorial(n)=n*factorial(n-1)\line\line # the main advatages of recursive function\line\line # 1 we can reduce length of the code and improves readability\line # 2 we can solve complex promblems\line\line # eg\line\line # def factorial(n):\line #     if n==0:\line #         result=1\line #     else:\line #         result=n*factorial(n-1)\line #     return result\line # print("factorial of 4 is",factorial(4))\line # print("factorial of 5 is",factorial(5))\line\line # eg2        WITHOUT RECURSIVE FUNCTION7988787\line # def fact(n):\line #     result=1\line #     while n>=1:\line #         result=result*n\line #         n=n-1\line #     return result\line #\line # # for i in range(1,5):\line # #     print("the facorial of",i,"is",fact(i))\line # a=fact(5)\line # print(a)\line\line\line\line\line\line\line # lambda function:/anonymous function\line\line # sometimes we can declare a function without any name,such type of nameless function are called anonymous\line # function or lambda function\line\line # normal function :\line\line # we can define by using def keyword :\line\line # def squarelet(n):\line #     return n*n\line\line # lambda function:\line\line # we can define using lambda keyword :\line\line # lambda n:n*n\line\line # syntax of lambda function :\line\line # lambda argument_list:expression\line\line # eg1\line\line # s=lambda n:[n*n,2*n,3**n,2*n]\line # print("the square of 4 is",s(4))\line # print("the square of 4 is",s(5))\line # eg2\line #\line # s=lambda a,b:[a+b,a-b,a*b,a/b,abs(a-b)]\line # print("the calc of 10,20 is",s(10,20))\line # print("the calc of 100,200 is",s(100,200))\line\line # eg3\line\line # s=lambda a,b:a if a>b else b\line # print("the biggest value is 10,20 is:",s(10,20) )\line # print("the biggest value of 200,100 is:",s(200,100))\line\line # filter() function:\line\line # we can use filter() function to filter values from the given sequence based on some condition\line\line # filter(function,squence)\line\line # eg1\line #\line # def even(x):  # without lambda function\line #     if x%2==0:\line #         return True\line #     else:\line #         return False\line # l=[0,5,10,15,20,25,30]\line # l1=list(filter (even,l))\line # print(l1)\line\line\line # l=[0,5,10,15,20,25,30]        # with lambda function\line # even=list(filter(lambda x:x%2==0,l))\line # print(even)\line # odd=list(filter(lambda x:x%2!=0,l))\line # print(odd)\line\line # eg2\line\line # mystring="baswaraj marotirao malge"       # without lambda function\line # l1=["a","e","i","o","u"]\line # def fun(x):\line #     if x in l1:\line #         return True\line #     else:\line #         return False\line #\line # vow=" ".join(filter(fun,mystring))\line # print(vow)\line #\line # constants=" ".join(filter(lambda x: x  not in l1,mystring))           # with lambda function\line # print(constants)\line\line # map() function:\line\line # syntax:\line\line # map(function,sequence)\line\line # l=[1,2,3,4,5]              # without lambda function\line # def double(x):\line #     return 2*x\line # l1=list(map(double,l))\line # print(l1)\line\line # l=[1,2,3,4,5]                     # with lambda function\line # l1=list(map(lambda x:2*x,l))\line # print(l1)\line\line # eg2\line\line # s="baswaraj"               # without lambda function\line # def double(x):\line #     return 3*x\line # s1=list(map(double,s))\line # print(s1)\line\line # s="baswaraj"             # with lambda function\line # s1=list(map(lambda x:3*x,s))\line # print(s1)\line\line # eg3\line # l=[2,3,4,5,6]\line # l1=list(map(lambda x:x*x,l))\line # print(l1)\line\line # eg4\line # l1=[2,3,4,5,6] # for i in range(0,10)\line # l2=[6,7,8,9,8,]\line # l3=list(map(lambda x,y:x*y,l1,l2))\line # print(l3)\line\line # eg5\line # l3=list(map(lambda x,y:x*y,range(5),range(6,11)))\line # print(l3)\line # reduce() function:\line\line # syntax:   reduce(function,sequence)\line\line # eg1\line # from functools import*\line # l=[10,20,30,40,50]\line # result=reduce(lambda x,y:x+y,l)\line # print(result)\line # # #\line # result=reduce(lambda x,y:x*y,l)\line # print(result)\line #\line # # eg2\line # from functools import*\line # result=reduce(lambda x,y:x+y,range(1,101))\line # print(result)\line\line\line # function aliasing:\line\line # for the existing function we can give anthor name ,which is nothing but function aliasing\line\line # eg1\line # def wish(name):\line #     print("good morning",name)\line # greeting=wish\line # print(id(wish))\line # print(id(greeting))\line #\line # wish("baswaraj")\line # greeting("kiran")\line\line # eg2\line #\line # def wish(name):\line #     print("good morning",name)\line # greeting=wish\line #\line # greeting("baswaraj")\line # wish("kiran")\line #\line # del wish\line # greeting("kiran")\line # wish("kiran")       #name error :name wish is not defined\line\line\line\line # Nested function\line\line # we can declare a function inside another function ,such type of function are called nested function\line\line # eg1\line # def outer():\line #     print("outer function strated")\line #     def inner():\line #         print("inner function exuection")\line #     print("outer function calling inner function")\line #     inner()\line # outer()\line\line # eg2\line\line # def f1():\line #     def inner(a,b):\line #         print("the sum",a+b)\line #         print("the average",(a+b)/2)\line #     inner(10,20)\line #     inner(20,30)\line #     inner(40,50)\line #\line # f1()\line\line # eg3\line # def outer():\line #     print("outer function strated")\line #     def inner():\line #         print("inner function started")\line #         def small():\line #             print("small is here")\line #             def verysmall():\line #                 print("verysmall is here")\line #             verysmall()\line #         small()\line #     inner()\line # outer()\line\line # eg4\line\line # def outer():\line #     print("outrer function strated")\line #     def inner():\line #         print("inner functin started")\line #     print("outer function returing inner function")\line #     return inner\line # f1=outer\line # # f1=outer()\line # f1()\line\line\line # Function decorators:\line\line # eg1\line\line # def decor(func):\line #     def inner(name):\line #         if name=="baswaraj":\line #             print("hello baswaraj bad morning")\line #         else:\line #             func(name)\line #     return inner\line #\line # @decor\line # def wish(name):\line #     print("hello",name,"goood morning")\line #\line # wish("kiran")\line # wish("swara")\line # wish("baswaraj")\line\line # eg2\line\line # def insurances(func):\line #     print("inside decoratots")\line #     def amt():\line #         loan=func()\line #         print("after adding insurance your loan is :")\line #         return loan+1000\line #     return amt\line #\line # @insurances\line # def loan():\line #     print("your loan is ",20000)\line #     return 20000\line # print(loan())\line\line # eg3\line # #\line # def upper_case(func):\line #     def inner():\line #         str1=func()\line #         return str1.upper()\line #     return inner\line # #\line # def split_words(func):\line #     def gather():\line #         str2=func()\line #         return str2.split()\line #     return gather\line #\line # # @upper_case\line # @split_words\line # @upper_case\line # def words():\line #     return "baswaraj marotirao malge"\line # print(words())\line\line # eg4\line\line # def out(func):\line #     def inner():\line #         x=func()\line #         return x*x\line #     return inner\line # def out2(func):\line #     def inner():\line #         x=func()\line #         return 2*x\line #     return inner\line #\line # # @out\line # @out2\line # @out\line # def num():\line #     return 10\line # print(num())\line #\line # z=out(out2(num))\line # print(z())\line\line\line # eg5\line\line # def deco_first_stud(func):\line #     def james(name,mark):\line #         result="full name :\{\} \\tobtained mark:\{\}"\line #         print(result.format(name,mark))\line #         return func(name,mark)\line #     return james\line #\line # @deco_first_stud\line # def result_system(name,mark):\line #     if mark >=35:\line #         print("result is pass")\line #     else:\line #         print("result is fail !")\line #\line # result_system("baswaraj",40)\line\line # eg5\line\line # def smart_division(func):\line #     def inner(a,b):\line #         print("we are dividing",a,"with",b)\line #         if b==0:s cann\line # #             print("oopot divide")\line #         else:\line #             return func(a,b)\line #     return inner\line #\line # @smart_division\line # def division(a,b):\line #     return a/b\line #\line # print(division(20,2))\line # print(division(10,0))\line\line # Generators:\line # generator is a function which is responsible to genrate a sequence of values\line # we can write generator function just like ordinary function,but it uses yield keyword to return values\line\line # eg1\line\line # def mygen():\line #     yield'a'\line #     yield'b'\line #     yield'c'\line #\line # g=mygen()\line # print(type(g))\line #\line # print(next(g))\line # print(next(g))\line # print(next(g))\line\line # eg2\line # def mygen():\line #     a=10\line #     for i in range(0,10,2 ):\line #         yield i\line # x=mygen()\line # print(next(x))\line # print(next(x))\line # print(next(x))\line\line # eg3\line # def my_gen():\line #     n=1\line #     print("this is printed first and n= :",n)\line #     yield n\line #     n+=1\line #     print("this is printed second and n= :",n)\line #     yield n\line #     n+=1\line #     print("this is printed at last n= :",n)\line #     yield n\line # a=my_gen()\line # next(a)\line # next(a)\line # next(a)\line\line # eg4\line # def countdown(num):\line #     print("start countdown")\line #     while(num>0):\line #         yield num\line #         num=num-1\line # values=countdown(6)\line # for x in values:\line #     print(x)\line\line # eg5\line\line # def firstn(num):\line #     n=1\line #     while n<=num:\line #         yield n\line #         n=n+1\line #\line # values=firstn(5)\line # for x in values:\line #     print(x)\line #\line # values=firstn(10)\line # l1=list(values)\line # print(l1)\line\line # eg6\line\line # def fib():\line #     a,b=0,1\line #     while True:\line #         yield a\line #         a,b=b,a+b\line # for f in fib():\line #     if f>100:\line #         break\line #     print(f)\line #\line #\line # # generators vs normal collection wrt performances:\line #\line # import random\line # import time\line #\line #\line # names=["baswaraj","sunil","sadashiv","naman"]\line # subjects=["math","python","java"]\line #\line # def people_list(num_people):\line #     results=[]\line #     for i in range(num_people):\line #         person=\{\line #             'id':i,\line #             'name':random.choice(names),\line #             'subject':random.choice(subjects)\line #             \}\line #         results.append\line #     return results\line # def people_generator(num_people):\line #\line #     for i in range(num_people):\line #         person=\{\line #             'id':i,\line #             'name':random.choice(names),\line #             'subject':random.choice(subjects)\line #             \}\line #         yield person\line #\line # t1 = time.clock()              AttributeError: module 'time' has no attribute 'clock'\line # people=people_generator(10000000)\line # t2=time.clock()\line #\line # '''t1=time.clock()\line # people=people_list(10000000)\line # t2=time.clock()'''\line #\line #\line # print('took\{\}'.format(t2-t1))\line\line\line # def fun(a):\line #     if a>10:\line #         return True\line #     else:\line #         return False\line # l1=filter(fun,[10,20,11])\line # print(tuple(l1))\line\line\line #\line # s=lambda a,b:[a,b if a%2==0 and b%2==0 else a,b]\line # print("the biggest value is 10,20 is:",s(10,20) )\line # print("the biggest value of 200,100 is:",s(200,100))\line\line\line # s="sadashiv sarwad"\par

\pard\sa200\sl276\slmult1\cf0\i0\f1\fs22\lang9\par
}
 